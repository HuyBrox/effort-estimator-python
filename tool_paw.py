import streamlit as st
import requests
from bs4 import BeautifulSoup
import pandas as pd
import re

# Thi·∫øt l·∫≠p giao di·ªán trang web
st.set_page_config(page_title="Effort Estimation Tool", layout="wide")

st.title("üåê Web Effort Estimation Tool")

# Nh·∫≠p URL c·ªßa d·ª± √°n c·∫ßn ph√¢n t√≠ch
url = st.text_input("üîó Nh·∫≠p URL c·ªßa d·ª± √°n web:")
if st.button("Qu√©t m√£ ngu·ªìn"):
    if not url.startswith("http"):
        st.error("URL kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p URL ƒë·∫ßy ƒë·ªß (v√≠ d·ª•: http://www.example.com).")
    else:
        try:
            # C√†o m√£ ngu·ªìn t·ª´ URL
            res = requests.get(url)
            soup = BeautifulSoup(res.text, "html.parser")

            # L·∫•y t√™n d·ª± √°n t·ª´ th·∫ª <title> c·ªßa trang
            project_name = soup.title.string.strip() if soup.title else "Unknown Project"

            # T√≠nh KLOC (S·ªë d√≤ng m√£)
            js_files = soup.find_all('script', src=True)
            css_files = soup.find_all('link', rel='stylesheet')
            html_code = res.text

            # ƒê·∫øm s·ªë d√≤ng trong c√°c file JavaScript v√† HTML
            js_code = ""
            for js in js_files:
                js_url = js['src']
                if not js_url.startswith('http'):
                    js_url = url + js_url  # ƒê·∫£m b·∫£o URL ƒë·∫ßy ƒë·ªß
                js_res = requests.get(js_url)
                js_code += js_res.text

            # ƒê·∫øm s·ªë d√≤ng trong m√£ HTML
            lines_html = len(html_code.split('\n'))
            lines_js = len(js_code.split('\n'))
            total_lines = lines_html + lines_js
            kloc = total_lines / 1000  # KLOC (1 KLOC = 1000 d√≤ng m√£)

            # T√≠nh Actual Effort (gi·∫£ s·ª≠: KLOC * 3)
            actual_effort = kloc * 3

            # T√≠nh c√°c ch·ªâ s·ªë kh√°c (gi·∫£ l·∫≠p)
            simple_uc = 5
            avg_uc = 3
            complex_uc = 2
            actor_s = 2
            actor_a = 1
            actor_c = 1
            tcf = 1.0
            ecf = 1.0
            fp_input = 10
            fp_output = 8
            fp_query = 5
            fp_file = 4
            fp_interface = 2

            # T·∫°o DataFrame ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£
            data = {
                "Project": [project_name],
                "KLOC": [kloc],
                "ACTUAL_EFFORT": [actual_effort],
                "Simple_UC": [simple_uc],
                "Average_UC": [avg_uc],
                "Complex_UC": [complex_uc],
                "Actor_Simple": [actor_s],
                "Actor_Avg": [actor_a],
                "Actor_Complex": [actor_c],
                "TCF": [tcf],
                "ECF": [ecf],
                "FP_Input": [fp_input],
                "FP_Output": [fp_output],
                "FP_Query": [fp_query],
                "FP_File": [fp_file],
                "FP_Interface": [fp_interface]
            }
            df = pd.DataFrame(data)

            st.success("‚úÖ ƒê√£ tr√≠ch xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng!")

            st.dataframe(df)

            # T·∫°o file CSV v√† cung c·∫•p link t·∫£i v·ªÅ
            csv = df.to_csv(index=False)
            st.download_button("üì• T·∫£i v·ªÅ CSV", csv, file_name="effort_data.csv", mime="text/csv")

        except Exception as e:
            st.error(f"L·ªói khi qu√©t m√£ ngu·ªìn: {e}")
